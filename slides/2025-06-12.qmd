---
title: Datenvisualisierung mit R
subtitle: Funktionen
format: clean-revealjs
highlight-style: tango
auto-stretch: false
author:
  - name: Armin Schäfer
    orcid: 0000-0002-2538-0092
    email: schaefer@politik.uni-mainz.de
center: true
standalone: true
embed-resources: true
footer: "Datenvisualisierung"
logo: ../../../logo_polwi.jpg
date: 06/12/2025
date-format: DD.MM.YYYY
---

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(here, scales, tinytable, emo, rio, gt, tidyverse)

bt_comp <- import(here("data", "bundestag_comp.xlsx"))

parteiliste <- c("Fraktionslos (AfD-Liste)", "AfD - Fraktionslos", "SSW")

bt <- bt_comp %>% 
  filter(!partei %in% parteiliste) %>% 
  rename(gender = geschlecht) %>% 
  mutate(
    partei = case_match(partei,
        c("CDU", "CSU") ~ "CDU/CSU",
        "DIE LINKE"     ~ "LINKE",
        .default = partei),
    alter = 2021-geburtsjahr,
    gender = case_when(
      gender == 0 ~ "m",
      gender == 1 ~ "w"))

ces <- import(here("data", "ces_usa.csv"))

```


## Vorsicht beim Einsatz von `na.omit()`!

Häufig stören fehlende Werte in einem Datensatz, weil sie unter Umständen in der Grafik dargestellt werden. Es gibt verschiedene Wege damit umzugehen. Eine Möglichkeit ist, die fehlenden Werte mit `na.omit()` zu entfernen. Das ist aber nicht immer sinnvoll, da dadurch ganze Zeilen gelöscht werden, die unter Umständen für andere Variablen noch Daten enthalten.

## Vorsicht beim Einsatz von `na.omit()`!

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ces %>%
  na.omit() %>% 
  tally()


ces %>% 
  select(CC22_340a) %>% 
  na.omit() %>% 
  tally()
  
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ces %>%
  filter(!is.na(CC22_340a)) %>% 
  tally()

ces %>%
  select(CC22_340a) %>% 
  filter(!is.na(CC22_340a)) %>% 
  tally()
  
```

:::

::::

# Fortsetzung `group_by()`

## Von Individuen zu Gruppen mit `group_by()`

```{r}
#| echo: true

bt %>% 
  group_by(partei) %>%
  summarise(mean_alter = mean(alter, na.rm=TRUE)) %>% # erstellt Aggregatdatensatz
  tt(digit = 3) %>% style_tt(fontsize = .5) %>% # vom tinytable-Package
  style_tt(i=0, fontsize = 0.5)

```


## Durchschnitt pro Gruppe mit zwei Argumenten

```{r}
#| echo: true
#| code-line-numbers: "3"

bt %>% 
  filter(!is.na(gender)) %>% 
  group_by(gender, partei) %>%
  summarise(mean_alter = mean(alter, na.rm=TRUE)) %>% 
  pivot_wider(names_from = gender, values_from = mean_alter) %>% 
  tt(digit = 3) %>% style_tt(fontsize = .5) %>% style_tt(i=0, fontsize = 0.5)

```

## Mehrere Berechnungen pro Gruppe

```{r}
#| echo: true

bt %>% 
  group_by(partei) %>%
  summarise(mean_alter = mean(alter, na.rm=TRUE),   # mean = Mittelwert
            med_alter  = median(alter, na.rm=TRUE), # median = Median
            std_alter  = sd(alter, na.rm=TRUE),     # sd = Standardabweichung
            min_alter  = min(alter),                # min = Minimum
            max_alter  = max(alter),                # max = Maximum
            obs        = n()) %>%                   # n = Anzahl
  tt(digit = 3) %>% style_tt(fontsize = .5) %>% style_tt(i=0, fontsize = 0.5)

```

## Mittelwerte und Streuung

:::: {.columns}

::: {.column width="55%"}

```{r}
#| echo: true
#| eval: false

bt %>% 
  group_by(partei) %>%
  summarise(mean_alter = mean(alter, na.rm=TRUE), 
            std_alter  = sd(alter, na.rm=TRUE)) %>% 
  ggplot(aes(x = partei, y = mean_alter, 
             ymin = mean_alter - std_alter, 
             ymax = mean_alter + std_alter)) +
  geom_pointrange(color = "deeppink2")+
  scale_y_continuous(limits = c(20,80))+
  labs(x = NULL, y = "Alter der Abgeordneten")

```

:::

::: {.column width="45%"}

```{r}
#| echo: false

bt %>% 
  group_by(partei) %>%
  summarise(mean_alter = mean(alter, na.rm=TRUE), 
            std_alter  = sd(alter, na.rm=TRUE)) %>% 
  ggplot(aes(x = partei, y = mean_alter, 
             ymin = mean_alter - std_alter, 
             ymax = mean_alter + std_alter)) +
  geom_pointrange(size = 1.2, color = "deeppink2")+
  scale_y_continuous(limits = c(20,80))+
  labs(x = NULL, y = "Alter der Abgeordneten")+
  theme(base_size = 16)

```



:::

:::: 
## Durchschnitt pro Gruppe im Originaldatensatz

```{r}
#| echo: true
#| code-line-numbers: "3"

bt %>% 
  group_by(partei) %>%
  mutate(mean_alter = mean(alter, na.rm=TRUE)) %>% 
  select(name, partei, alter, mean_alter) %>% 
  head()%>% 
  tt(digit = 3) %>% style_tt(fontsize = .5) %>% style_tt(i=0, fontsize = 0.5)

```

## `summarise()` vs. `mutate()`

::: {.callout-important title="Sehr wichtig!"}

Wenn Sie `group_by()` mit `summarise()` kombinieren, erhalten Sie immer **aggregierte Informationen** -- d.h., die Invidualdaten verschwinden. Nutzen Sie hingegen die Kombination `group_by()` und `mutate()` werden zwar die Rechenoperationen oder die  Datenumwandlung *auf Gruppenebene durchgeführt*, die Ergebnisse aber **dem Individualdatensatz hinzugefügt**!

Überlegen Sie vorab, was Sie benötigen.

:::

## Übung

Verwenden Sie den Datensatz `bt` und erstellen Sie eine Grafik mit `geom_boxplot()`, die das Alter der Abgeordneten nach Partei zeigt. Fügen Sie der Grafik das Durchschnittsalter in den Fraktionen als rote Punkte hinzu.

## Individual- und Aggregatdaten in einem Plot

```{r}
#| echo: true
#| out-width: 70%

ave_age <- bt %>% 
  group_by(partei) %>% 
  summarise(mean_alter = mean(alter, na.rm=TRUE)) # erstellt Aggregatdatensatz

ggplot()+
  geom_violin(data = bt, # Individualdatensatz
              aes(x = partei, y = alter)) + 
  geom_point(data = ave_age, # Aggregatdatensatz
    aes(x = partei, y = mean_alter), color = "red", size = 3)

```

## ... geht auch

```{r}
#| echo: true
#| out-width: 60%

bt %>% 
  group_by(partei) %>% 
  mutate(mean_alter = mean(alter, na.rm=TRUE)) %>% 
  ggplot()+
  geom_violin(aes(x = fct_reorder(partei, mean_alter), y = alter)) + 
  geom_point(aes(x =  fct_reorder(partei, mean_alter), y = mean_alter),
              color = "red", size = 3)+
  labs(x = NULL, y = "Alter")

```

## Mehrere Datensätze in `ggplot()`

::: {.callout-note title="Hinweis"}

In `ggplot()` können Sie mehrere Datensätze gleichzeitig verwenden, indem Sie in den einzelnen `geom_`-Funktionen die jeweiligen Datensätze angeben. Das ist besonders nützlich, wenn Sie Individual- und Aggregatdaten in einem Plot kombinieren möchten.

:::

# Funktionen

## DRY-Prinzip

Das DRY-Prinzip steht für "**Don't Repeat Yourself**" und ist ein grundlegendes Prinzip beim Kodieren. Ziel ist es, Redundanzen im Code zu minimieren, um Lesbarkeit und Effizienz zu verbessern und Fehler zu vermeiden.

Die Idee hinter dem DRY-Prinzip ist, dass jedes Wissenselement oder jede Regel in einem System an genau einer Stelle vorhanden sein sollte. Wenn dieselbe Information oder derselbe Code an mehreren Stellen des Skripts wiederholt wird, müssen Änderungen an vielen Stellen vorgenommen werden, was ineffizent und fehleranfällig ist.

Funktionen sind ein Weg, DRY umzusetzen.

## Einführung: Fehleranfälligkeit

```{r}
#| eval: false
#| echo: true

df <- tibble(
  a = rnorm(5),
  b = rnorm(5),
  c = rnorm(5),
  d = rnorm(5))

df %>% mutate(
  a = (a - min(a, na.rm = TRUE)) / 
    (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),
  b = (b - min(b, na.rm = TRUE)) / 
    (max(b, na.rm = TRUE) - min(a, na.rm = TRUE)),
  c = (c - min(c, na.rm = TRUE)) / 
    (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),
  d = (d - min(d, na.rm = TRUE)) / 
    (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))
)

```

Wo liegt der Fehler?^[Das Beipsiel ist [R for Data Science](https://r4ds.hadley.nz/functions) entnommen.]

## Aufbau von Funktionen

Funktionen sind *immer gleich aufgebaut*. Zunächst legen wir einen **Namen** fest, dann sagen wir, dass mit `function()` eine Funktion erstellt wird. Anschließend legen wir in der **runden Klammer** fest, welche Variablen (oder anderes) verwendet werden sollen. In der **geschweiften Klammer** wird anschließend definiert, was die Funktion tun soll.

```{r}
#| eval: false
#| echo: true

name_der_funktion <- function(var1){
  ergebnis <- befehl(var1)
  return(ergebnis)
} 

name_der_funktion(var1) # wendet die Funktion an

```

## Aufbau von Funktionen

Erstellen Sie nun einen Vektor x, der die Zahlen 1 bis 100 (`x <- c(1:100)`) enthält, und erstellen Sie eine Funktion, die daraus den Mittelwert berechnet.

```{r}
#| eval: false
#| echo: true

name_der_funktion <- function(var1){
  ergebnis <- befehl(var1)
  return(ergebnis)
} 

name_der_funktion(var1) # wendet die Funktion an

```

## Ein erstes Beispiel

```{r}
#| echo: true

x <- c(1:100)

mtw <- function(var1){
  mtwx <- sum(var1)/length(var1)
  return(mtwx)
  } # muss nicht in einer neuen Zeilen steht, hilft aber beim Lesen.

mtw(x) # jetzt wenden wir die Funktion auf "x" an.

```

## Variablen skalieren

Im nächsten Schritt wollen wir zunächst eine Variable, dann mehrere Variablen zwischen 0 und 1 skalieren. Wir beginnen mit einem ausgedachten Beispiel, bevor wir den Datensatz verwenden.

```{r}
#| echo: true

x <- c(3,5,7,9) # diese Zahlen werden skaliert. Es gibt keine NAs.

x_rs <- ((x - min(x)) / (max(x) - min(x)))

round(x_rs, 2) # Sie erinnern sich an diesen Befehl, nicht wahr?

```

Was müssen wir tun, wenn fehlende Werte vorhanden sind?

## Variablen skalieren

```{r}
#| echo: true

x <- c(3,5,7,9,NA) 

x_rs <- ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))

round(x_rs, 2)

```

Schreiben Sie nun eine Funktion mit dem Namen [rescale01]{.tip}, die diese Skalierung enthält.

## Skalierungsfunktion

```{r}
#| echo: true

rescale01 <- function(var1){
    (var1 - min(var1, na.rm = TRUE)) / 
    (max(var1, na.rm = TRUE) - min(var1, na.rm = TRUE))
}

round(rescale01(x),2) 

```

Weitere Tests.

```{r}
#| echo: true

rescale01(c(-10, -7, 0, 4, 10))

rescale01(c(1, 2.8, 3, 4.1, 5))

rescale01(c(-2,-0.5,1,4,7))

```

## Echte Daten skalieren

```{r}
#| echo: true

age_rs <- rescale01(ces$age)

summary(age_rs) # dieser Befehl zeigt Kernzahlen eines Vektors an

rm(age_rs)

```

## Echte Daten skalieren

Nun fügen wir dem Datensatz neue, reskalierte Variablen hinzu. Wir verwenden die Variablen "age", "inc6", "urbancity" und "newsint".

```{r}
#| echo: true

ces %>% 
  mutate(
    age_rs = rescale01(age),
    inc_rs = rescale01(inc6),
    urb_rs = rescale01(urbancity),
    new_rs = rescale01(newsint)) %>% 
  names()

```

## Ein visueller Eindruck

```{r}
#| out-width: 60%
#| echo: true

ces %>% 
  mutate(
    age_rs = rescale01(age),
    inc_rs = rescale01(inc6),
    urb_rs = rescale01(urbancity),
    new_rs = rescale01(newsint)
  ) %>% 
  ggplot(aes(x = age, y = age_rs))+
  geom_point()+ theme_light()

```

## ...aber noch zu viele Wiederholungen

Statt die Variablen einzeln zu bearbeiten, verwenden wir `across()`. Die Kombination aus `mutate()` und `across()` erlaubt es, Funktionen auf mehrere Spalten eines Datensatzes anzuwenden:

```{r}
#| echo: true

test <- ces %>% # nicht den Datensatz überschreiben!
  mutate(across(c(age, inc6, urbancity, newsint), rescale01))

```

## Neue Variablen mit `mutate(across())`

```{r}
#| echo: true

ces <- ces %>% 
  mutate(across(c(age, inc6, urbancity, newsint), rescale01,
                .names = "{.col}_rs"))

```

Der Befehl `.names` gibt an, wie die neu zu erstellenden Variablen benannt werden. Der neue Name folgt nach dem Gleichheitszeichen. In diesem Fall sagen wir mit `{.col}`, dass der Ursprungsname genommen und mit dem Zusatz `_rs` ergänzt werden soll. Nicht intuitiv, aber sehr nützlich.

## Bestehende Funktionen anwenden

::: {.callout-tip title="Tipp"}

Statt Spalten/Variablen durch ihre Namen auszuwählen, können wir auch die Auswahloptionen `starts_with()` oder `ends_with()` verwenden -- aber nur, **falls die Auswahl damit eindeutig ist**! Weitere Auswahloptionen sind `everything()` oder z.B. `where(is.numeric)`.

:::

##

To be continued....

## Session Info

```{r}

sessionInfo()

```
